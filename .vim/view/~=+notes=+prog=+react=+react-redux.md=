let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1
argglobal
let s:cpo_save=&cpo
set cpo&vim
inoremap <buffer> <silent> <Plug>MarkdownPreviewToggle :MarkdownPreviewToggle
inoremap <buffer> <silent> <Plug>MarkdownPreviewStop :MarkdownPreviewStopa
inoremap <buffer> <silent> <Plug>MarkdownPreview :MarkdownPreviewa
imap <buffer> <silent> <S-CR> <Plug>(mkdx-shift-enter)
imap <buffer> <silent> <C-P> <Plug>(mkdx-ctrl-p-compl)
imap <buffer> <silent> <C-N> <Plug>(mkdx-ctrl-n-compl)
vmap <buffer> <silent> 	 <Plug>(mkdx-indent)
nmap <buffer> <silent> 	 <Plug>(mkdx-indent)
vmap <buffer>  k <Plug>(mkdx-toggle-to-kbd-v)
nmap <buffer>  k <Plug>(mkdx-toggle-to-kbd-n)
nmap <buffer>  L <Plug>(mkdx-quickfix-links)
nmap <buffer>  I <Plug>(mkdx-quickfix-toc)
nmap <buffer>  i <Plug>(mkdx-gen-or-upd-toc)
vmap <buffer>  , <Plug>(mkdx-tableize)
vmap <buffer>  s <Plug>(mkdx-text-strike-v)
nmap <buffer>  s <Plug>(mkdx-text-strike-n)
vmap <buffer>  ` <Plug>(mkdx-text-inline-code-v)
nmap <buffer>  ` <Plug>(mkdx-text-inline-code-n)
vmap <buffer>  b <Plug>(mkdx-text-bold-v)
nmap <buffer>  b <Plug>(mkdx-text-bold-n)
vmap <buffer>  / <Plug>(mkdx-text-italic-v)
nmap <buffer>  / <Plug>(mkdx-text-italic-n)
vmap <buffer>  ln <Plug>(mkdx-wrap-link-v)
nmap <buffer>  ln <Plug>(mkdx-wrap-link-n)
vmap <buffer>  ll <Plug>(mkdx-toggle-list-v)
nmap <buffer>  ll <Plug>(mkdx-toggle-list-n)
vmap <buffer>  lt <Plug>(mkdx-toggle-checklist-v)
nmap <buffer>  lt <Plug>(mkdx-toggle-checklist-n)
vmap <buffer>  t <Plug>(mkdx-toggle-checkbox-v)
nmap <buffer>  t <Plug>(mkdx-toggle-checkbox-n)
vmap <buffer>  ' <Plug>(mkdx-toggle-quote-v)
nmap <buffer>  ' <Plug>(mkdx-toggle-quote-n)
nmap <buffer>  ] <Plug>(mkdx-demote-header)
nmap <buffer>  [ <Plug>(mkdx-promote-header)
vmap <buffer>  = <Plug>(mkdx-checkbox-next-v)
vmap <buffer>  - <Plug>(mkdx-checkbox-prev-v)
nmap <buffer>  = <Plug>(mkdx-checkbox-next-n)
nmap <buffer>  - <Plug>(mkdx-checkbox-prev-n)
noremap <buffer> <silent> ,dd :exe b:python . " pad.pad.delete()"
noremap <buffer> <silent> ,-a :exe b:python . " pad.pad.unarchive()"
noremap <buffer> <silent> ,+a :exe b:python . " pad.pad.archive()"
noremap <buffer> <silent> ,-f :exe b:python . " pad.pad.move_to_savedir()"
noremap <buffer> <silent> ,+f :exe b:python . " pad.pad.move_to_folder()"
noremap <buffer> <silent> ,+m :exe b:python . " pad.pad.add_modeline()"
nmap <buffer> <silent> O <Plug>(mkdx-shift-o)
xnoremap <buffer> <silent> [[ :exe "normal! gv"|call search('\%(^#\{1,5\}\s\+\S\|^\S.*\n^[=-]\+$\)', "bsW")
nnoremap <buffer> <silent> [[ :call search('\%(^#\{1,5\}\s\+\S\|^\S.*\n^[=-]\+$\)', "bsW")
xnoremap <buffer> <silent> ]] :exe "normal! gv"|call search('\%(^#\{1,5\}\s\+\S\|^\S.*\n^[=-]\+$\)', "sW")
nnoremap <buffer> <silent> ]] :call search('\%(^#\{1,5\}\s\+\S\|^\S.*\n^[=-]\+$\)', "sW")
vmap <buffer> gf <Plug>(mkdx-gf-visual)
nmap <buffer> <silent> gx <Plug>(mkdx-gx)
nmap <buffer> <silent> gf <Plug>(mkdx-gf)
nmap <buffer> <silent> o <Plug>(mkdx-o)
nnoremap <buffer> <silent> <Plug>MarkdownPreviewToggle :MarkdownPreviewToggle
noremap <buffer> <silent> <Plug>MarkdownPreviewStop :MarkdownPreviewStop
noremap <buffer> <silent> <Plug>MarkdownPreview :MarkdownPreview
vmap <buffer> <silent> <S-Tab> <Plug>(mkdx-unindent)
nmap <buffer> <silent> <S-Tab> <Plug>(mkdx-unindent)
imap <buffer> <silent>  <Plug>(mkdx-enter)
imap <buffer> <silent>  <Plug>(mkdx-ctrl-n-compl)
imap <buffer> <silent>  <Plug>(mkdx-ctrl-p-compl)
imap <buffer> <silent> # <Plug>(mkdx-link-compl)
imap <buffer> <	 <Plug>(mkdx-insert-kbd)
imap <buffer> ``` <Plug>(mkdx-fence-backtick)
imap <buffer> ~~~ <Plug>(mkdx-fence-tilde)
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal keymap=
setlocal noarabic
setlocal autoindent
setlocal backupcopy=
setlocal balloonexpr=
setlocal nobinary
setlocal nobreakindent
setlocal breakindentopt=
setlocal bufhidden=wipe
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),0],:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinscopedecls=public,protected,private
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=80
setlocal comments=fb:*,fb:-,fb:+,n:>
setlocal commentstring=<!--%s-->
setlocal complete=.,w,b,u,t,i
setlocal concealcursor=
setlocal conceallevel=0
setlocal completefunc=mkdx#Complete
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal cursorlineopt=both
setlocal define=
setlocal dictionary=
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'markdown'
setlocal filetype=markdown
endif
setlocal fillchars=
setlocal fixendofline
setlocal foldcolumn=2
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=0
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcqln
setlocal formatlistpat=^\\s*\\d\\+\\.\\s\\+\\|^\\s*[-*+]\\s\\+\\|^\\[^\\ze[^\\]]\\+\\]:\\&^.\\{4\\}
setlocal formatprg=
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=-1
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},0),0],:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,-
setlocal keywordprg=
setlocal linebreak
setlocal nolisp
setlocal lispoptions=
setlocal lispwords=
setlocal nolist
setlocal listchars=
setlocal makeencoding=
setlocal makeprg=
setlocal matchpairs=(:),{:},[:],<:>
setlocal modeline
setlocal modifiable
setlocal nrformats=bin,octal,hex
setlocal number
setlocal numberwidth=4
setlocal omnifunc=htmlcomplete#CompleteTags
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal norightleft
setlocal rightleftcmd=search
setlocal noscrollbind
setlocal scrolloff=-1
setlocal shiftwidth=4
setlocal noshortname
setlocal showbreak=
setlocal sidescrolloff=-1
setlocal signcolumn=auto
setlocal nosmartindent
setlocal nosmoothscroll
setlocal softtabstop=4
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=fr
setlocal spelloptions=
setlocal statusline=%!airline#statusline(1)
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'markdown'
setlocal syntax=markdown
endif
setlocal tabstop=4
setlocal tagcase=
setlocal tagfunc=
setlocal tags=
setlocal termwinkey=
setlocal termwinscroll=10000
setlocal termwinsize=
setlocal textwidth=0
setlocal thesaurus=
setlocal thesaurusfunc=
setlocal noundofile
setlocal undolevels=-123456
setlocal varsofttabstop=
setlocal vartabstop=
setlocal virtualedit=
setlocal wincolor=
setlocal nowinfixheight
setlocal nowinfixwidth
setlocal wrap
setlocal wrapmargin=0
silent! normal! zE
let &fdl = &fdl
let s:l = 6 - ((5 * winheight(0) + 21) / 42)
if s:l < 1 | let s:l = 1 | endif
keepjumps exe s:l
normal! zt
keepjumps 6
normal! 0
lcd ~/Google\ Drive/vimwiki
let &g:so = s:so_save | let &g:siso = s:siso_save
nohlsearch
doautoall SessionLoadPost
" vim: set ft=vim :
